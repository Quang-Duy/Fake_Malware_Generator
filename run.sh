#!/bin/bash
# family=$(shyaml get-value datamodule.datasets.train.family < ./conf/data/default.yaml)

### Declare 3 classifiers to loop through later
classifiers=("ocsvm" "isoForest" "lof")

### Function to set all classifiers usages to False
clear_usage(){
	sed -i 's/usage_ocsvm:[^\n]*/usage_ocsvm: False/' ./conf/classifiers/default.yaml
	sed -i 's/usage_isoForest:[^\n]*/usage_isoForest: False/' ./conf/classifiers/default.yaml
	sed -i 's/usage_lof:[^\n]*/usage_lof: False/' ./conf/classifiers/default.yaml
}


# Train WGANGP
echo -e "### Train WGANGP ###\n-------------------------"
# python -m src.training.train_wgangp &&
# wait

for clf_name in ${classifiers[@]}
do
	# Set all classifiers' usage to False
	clear_usage

	# Set the selected classifier's usage to True and change experiment run name accordingly
	sed -i "s/usage_${clf_name}:[^\n]*/usage_$clf_name: True/" ./conf/classifiers/default.yaml
	sed -i "s/eval_run_name:[^\n]*/eval_run_name: ${clf_name^^}_\${data.datamodule.datasets.train.family}_cv_optimed_HPC/1" ./conf/gan_evaluate/default.yaml
	sed -i "s/optim_run_name:[^\n]*/optim_run_name: ${clf_name^^}_\${data.datamodule.datasets.train.family}_tuning_HPC/1" ./conf/optim/default.yaml

	# Tune Classifier
	echo -e "\n### Tuning ${clf_name^^} ###\n-------------------------"
	python -m src.tuning.tuning_classifiers &&
	wait

	# Evaluate WGANGP with OCSVM
	echo -e "\n### Evaluating WGANGP on ${clf_name^^} ###\n-------------------------"
	python -m src.best_gan_evaluate
	wait
done


