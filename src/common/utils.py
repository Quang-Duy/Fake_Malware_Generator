import os
from datetime import datetime
from pathlib import Path
from ruamel.yaml import YAML

yaml = YAML()
yaml.preserve_quotes = True
yaml.boolean_representation = ['False', 'True']


def clear_usage(param_config, clf_name) -> None:
    with open(param_config) as f:
        doc = yaml.load(f)

    for name in clf_name:
        doc['clf_module'][f'{name}_param']['usage'] = False

    with open(param_config, 'w') as f:
        yaml.dump(doc, f)


def set_usage(param_config, clf_name) -> None:
    with open(param_config) as f:
        doc = yaml.load(f)

    doc['clf_module'][f'{clf_name}_param']['usage'] = True

    with open(param_config, 'w') as f:
        yaml.dump(doc, f)


def set_optim_run_name(file_path, clf_name):
    with open(file_path) as f:
        doc = yaml.load(f)

    doc['optim_module']['optim_run_name'] = f'{str(clf_name).upper()}' \
        + '_${data.datamodule.datasets.train.family}_tuning_HPC'

    with open(file_path, 'w') as f:
        yaml.dump(doc, f)


def set_eval_run_name(file_path, clf_name):
    with open(file_path) as f:
        doc = yaml.load(f)

    doc['evalmodule']['eval_run_name'] = f'{str(clf_name).upper()}' \
        + '_${data.datamodule.datasets.train.family}_cv_optimed_HPC'

    with open(file_path, 'w') as f:
        yaml.dump(doc, f)


class MyTimer:
    def __init__(self):
        self.start = datetime.now()
        self.end = None

    def get_execution_time(self):
        self.end = datetime.now()
        return self.end - self.start


PROJECT_ROOT: Path = Path(os.getcwd())
assert (
    PROJECT_ROOT.exists()
), 'PROJECT_ROOT has to be the root of the project. Double check your ' \
   'working directory!'

os.chdir(PROJECT_ROOT)
