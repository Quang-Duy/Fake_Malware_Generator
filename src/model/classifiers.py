import logging
import coloredlogs
import hydra
import numpy as np
import mlflow
import omegaconf
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import KFold
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

from src.common.utils import PROJECT_ROOT

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.DEBUG, logger=logger)


class Classifiers:
    def __init__(self, svm_param, rf_param,
                 naive_bayes_param, knn_param,
                 k_fold, random_state):
        self.svm_param = svm_param
        self.rf_param = rf_param
        self.naive_bayes_param = naive_bayes_param
        self.knn_param = knn_param
        self.kf = KFold(n_splits=k_fold, shuffle=True,
                        random_state=random_state)

    def select_classifier(self):
        clf = None

        if self.svm_param.usage and self.rf_param.usage \
                and self.naive_bayes_param.usage and self.knn_param.usage:
            raise ValueError('Can only evaluate on 1 Classifier at a time!!!')

        if not (self.svm_param.usage or self.rf_param.usage
                or self.naive_bayes_param.usage or self.knn_param.usage):
            raise ValueError('No Classifier was chosen!!!')

        if self.svm_param.usage:
            clf = SVC(C=self.svm_param.C, kernel=self.svm_param.kernel)
        elif self.naive_bayes_param.usage:
            clf = GaussianNB(
                var_smoothing=self.naive_bayes_param.var_smoothing
            )
        elif self.rf_param.usage:
            clf = RandomForestClassifier(
                n_estimators=self.rf_param.n_estimators,
                max_depth=self.rf_param.max_depth
            )
        elif self.knn_param.usage:
            clf = KNeighborsClassifier(
                n_neighbors=self.knn_param.n_neighbors, p=self.knn_param.p
            )
        return clf

    def train_and_eval(self, train_data, label, model_nth, evaluator_nth):
        """ Train and Evaluate a Classifier of choice on real and fake data

        Args:
            train_data:
            label:
            model_nth:
            evaluator_nth:

        Returns:

        """
        acc_arr = []

        for train_index, test_index in self.kf.split(train_data):
            X_train, X_test = train_data[train_index], train_data[test_index]
            y_train, y_test = label[train_index], label[test_index]

            # Define and train a Classifier of choice
            clf = self.select_classifier()
            clf.fit(X_train, y_train)
            acc = clf.score(X_test, y_test)
            acc_arr.append(acc)

        mean_score = np.mean(np.array(acc_arr))
        mlflow.log_metric(key=f'Classifier_on_Gen_{int(model_nth)}',
                          value=mean_score,
                          step=int(evaluator_nth))
        return mean_score


@hydra.main(config_path=str(PROJECT_ROOT / 'conf'), config_name='default')
def main(cfg: omegaconf.DictConfig):
    clf = hydra.utils.instantiate(
        cfg.classifiers.clf_module,
        _recursive_=False
    )
    print("Success!") if clf else print("Fail!")
    print(f'SVM * Parameter C = {clf.svm_param.C} * '
          f'Usage = {clf.svm_param.usage}')
    print(f'Random Forest * Parameter max_depth = {clf.rf_param.max_depth} * '
          f'Usage = {clf.rf_param.usage}')


if __name__ == "__main__":
    logger.propagate = False
    main()