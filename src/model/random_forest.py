import logging

import coloredlogs
import hydra
import matplotlib.pyplot as plt
import numpy as np
import omegaconf
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (classification_report, plot_confusion_matrix,
                             precision_score, recall_score)
from sklearn.model_selection import KFold

from src.common.utils import PROJECT_ROOT

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.DEBUG, logger=logger)


class RandomForest:
    def __init__(self, param):
        self.rf_param = param
        self.accuracy = []
        self.precision = []
        self.recall = []
        self.kf = KFold(n_splits=self.rf_param.k_fold, shuffle=True,
                        random_state=self.rf_param.random_state)

    def train_and_eval(self, X, y):
        best_score = 0.
        for train_index, test_index in self.kf.split(X):
            X_train, X_test = X[train_index], X[test_index]
            y_train, y_test = y[train_index], y[test_index]
            clf = RandomForestClassifier(
                n_estimators=self.rf_param.n_estimators,
                max_depth=self.rf_param.max_depth)
            clf.fit(X_train, y_train)
            acc = clf.score(X_test, y_test)

            self.accuracy.append(acc)
            if acc > best_score:
                best_score = acc
                best_train, best_test = train_index, test_index

            y_pred = clf.predict(X_test)
            self.precision.append(round(precision_score(y_test, y_pred), 2))
            self.recall.append(round(recall_score(y_test, y_pred), 2))

        logger.debug('Avg K-Fold Accuracy: {:.2f}'
                     .format(np.mean(np.array(self.accuracy))))
        logger.debug('Avg K-Fold Precision: {:.2f}'
                     .format(np.mean(np.array(self.precision))))
        logger.debug('Avg K-Fold Recall: {:.2f}'
                     .format(np.mean(np.array(self.recall))))

        X_train, X_test, y_train, y_test = X[best_train], X[best_test], y[
            best_train], y[best_test]
        clf = RandomForestClassifier(n_estimators=self.rf_param.n_estimators,
                                     max_depth=self.rf_param.max_depth)
        clf.fit(X_train, y_train)
        y_pred = clf.predict(X_test)

        fig, ax = plt.subplots(figsize=(4, 4))
        plot_confusion_matrix(clf, X_test, y_test,
                              display_labels=np.array(['real', 'fake']),
                              cmap=plt.cm.Blues, ax=ax)
        ax.set_title(f'{self.rf_param.architecture} confusion matrix')
        plt.show()

        logger.debug(f'Report \n{classification_report(y_test, y_pred)}')


@hydra.main(config_path=str(PROJECT_ROOT / 'conf'), config_name='default')
def main(cfg: omegaconf.DictConfig):
    model = hydra.utils.instantiate(
        cfg.random_forest.rfmodule, _recursive_=False
    )
    print("Success!") if model else print("Fail!")


if __name__ == "__main__":
    logger.propagate = False
    main()
