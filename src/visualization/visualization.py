import logging
import os

import coloredlogs
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.metrics import confusion_matrix

logger = logging.getLogger(__name__)
coloredlogs.install(level=logging.DEBUG, logger=logger)
logger.propagate = False


def plot_losses(results, epochs, model_name):
    logger.info('Plotting ...')
    f_d, ax_d = plt.subplots(figsize=(9, 6))
    f_g, ax_g = plt.subplots(figsize=(9, 6))
    x = [val for val in range(epochs)]
    d = np.array([losses[0] for _, losses in results.items()])
    g = np.array([losses[1] for _, losses in results.items()])

    ax_d_y_label = 'Discriminator Loss' if model_name == 'GAN' \
        else 'Critic Loss'

    ax_d.set_ylabel(ax_d_y_label)
    ax_d.set_xlabel('Epochs')
    ax_g.set_ylabel('Generator Loss')
    ax_g.set_xlabel('Epochs')
    ax_d.plot(x, d, 'r', label=ax_d_y_label)
    ax_d.set_title(f'{model_name} {ax_d_y_label}')
    ax_g.plot(x, g, 'b', label='Generator loss')
    ax_g.set_title(f'{model_name} Generator Loss')
    return f_d, ax_d, f_g, ax_g


def cm_analysis(y_true, y_pred, filename, save_path,
                labels, ymap=None, figsize=(6, 6)):
    """
    Generate matrix plot of confusion matrix with pretty annotations.
    The plot image is saved to disk.

    Args:
      y_true:    true label of the data, with shape (nsamples,)
      y_pred:    prediction of the data, with shape (nsamples,)
      filename:  filename of figure file to save
      labels:    string array, name the order of class labels in the confusion
                 matrix. use `clf.classes_` if using scikit-learn models.
                 with shape (nclass,).
      ymap:      dict: any -> string, length == nclass.
                 if not None, map the labels & ys to more understandable
                 strings. Caution: original y_true, y_pred and labels must
                 align.
      figsize:   the size of the figure plotted.
    """
    logger.info('Plotting confusion matrix ...')
    if ymap is not None:
        y_pred = [ymap[yi] for yi in y_pred]
        y_true = [ymap[yi] for yi in y_true]
        labels = [ymap[yi] for yi in labels]

    cm = confusion_matrix(y_true, y_pred)
    cm_sum = np.sum(cm, axis=1, keepdims=True)
    cm_perc = cm / cm_sum.astype(float) * 100
    annot = np.empty_like(cm).astype(str)
    n_rows, n_cols = cm.shape

    for i in range(n_rows):
        for j in range(n_cols):
            c = cm[i, j]
            p = cm_perc[i, j]
            s = cm_sum[i]
            annot[i, j] = '%.1f%%\n%d/%d' % (p, c, s)

    cm = pd.DataFrame(cm, index=labels, columns=labels)
    cm.index.name = 'True label'
    cm.columns.name = 'Predicted label'

    fig, ax = plt.subplots(figsize=figsize)
    sns.heatmap(cm, annot=annot, fmt='', ax=ax, cmap='Blues')

    plt.savefig(os.path.join(save_path, filename))
    plt.show()
